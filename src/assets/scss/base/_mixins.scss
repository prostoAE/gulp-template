@mixin mq($breakpoint) {
    $raw-query: map_get($breakpoints, $breakpoint);

    @if $raw-query {
        $query: if(type-of($raw-query) == 'string',
                unquote($raw-query),
                inspect($raw-query)
        );

        @media #{$query} {
            @content;
        }
    } @else {
        @error 'Не указано значение для `#{$breakpoint}`. ' + 'Пожалуйста, убедитесь, что точка останова объявлена в карте `$breakpoints`.';
    }
}

@mixin centering-xy() {
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
}

@mixin centering-x() {
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
}

@mixin centering-y() {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
}

@mixin placeholder($color, $size, $weight) {
    &::-webkit-input-placeholder {
        color: $color;
        font-size: $size;
        font-weight: $weight;
    }
    &:-moz-placeholder {
        color: $color;
        font-size: $size;
        font-weight: $weight;
    }
    &::-moz-placeholder {
        color: $color;
        font-size: $size;
        font-weight: $weight;
    }
    &:-ms-input-placeholder {
        color: $color;
        font-size: $size;
        font-weight: $weight;
    }
}

@mixin font-face($font-name, $file, $weight: normal, $style: normal) {
    @font-face {
        font-family: quote($font-name);
        src: local("#{$file}"),
            url('../fonts/#{$file}.woff2') format('woff2'),
            url('../fonts/#{$file}.woff') format('woff'),
            url('../fonts/#{$file}..ttf') format("truetype");
        font-weight: $weight;
        font-style: $style;
        font-display: swap;
    }
}

// Адаптивное свойство (clamp)
@mixin adaptive-value($property, $startSize, $minSize, $widthFrom: $containerWidth, $widthTo: $minWidth, $keepSize: 0) {
    @if ($startSize==0) {
        $startSize: 0.000001;
    }
    @if ($minSize==0) {
        $minSize: 0.000001;
    }

    // Для calc();
    $addSize: math.div($startSize - $minSize, 16);

    @if ($widthFrom == $containerWidth and $maxWidthContainer == 0) {
        $widthFrom: $maxWidth;
    }

    // Брейк-поинты в EM
    $widthFromMedia: em($widthFrom);
    $widthToMedia: em($widthTo);

    // Формула плавающего значения
    // Источник: https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
    $slope: math.div(($startSize - $minSize), ($widthFrom - $widthTo));
    $yIntersection: -$widthTo * $slope + $minSize;
    @if ($yIntersection==0) {
        $yIntersection: 0.000001;
    }
    $flyValue: #{rem($yIntersection)}" + " #{$slope * 100}vw;

    // Получение значения свойства
    $propertyValue: #{"clamp(" rem($minSize) "," $flyValue "," rem($startSize) ")"};
    // Если отрицательные значения
    @if ($minSize > $startSize) {
        $propertyValue: #{"clamp(" rem($startSize) "," $flyValue "," rem($minSize) ")"};
    }

    // Если поддерживается clamp();
    @supports (#{$property}: $propertyValue) {
        #{$property}: $propertyValue;
    }
    // Если не поддерживается clamp();
    @supports not (#{$property}: $propertyValue) {
        #{$property}: calc(#{rem($minSize)} + #{$addSize} * (100vw - #{rem($widthTo)}) / #{math.div($widthFrom, 16) - math.div($widthTo, 16)});
    }

    // Устанавливаем значения по умолчанию
    @if $widthFrom != $containerWidth and $widthFrom != $maxWidth and $keepSize != 1 and $keepSize != 2 {
        @media (min-width: $widthFromMedia) {
            #{$property}: inherit;
        }
    }
    @if $widthTo != $minWidth and $keepSize != 1 and $keepSize != 3 {
        @media (max-width: $widthToMedia) {
            #{$property}: inherit;
        }
    }
}
